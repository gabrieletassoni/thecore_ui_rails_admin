// override this file in your application to add custom behaviour

//= require 'selectize.min'
//= require 'thecore_ui_commons'
//= require 'rails_admin/custom/thecore/ui'

const adjustIframe = function (obj) {
    console.log("Resizing");
    obj.style.height = obj.contentWindow.document.body.scrollHeight + 'px';
};

let currentURL = new URL(window.location.href);

$(document).on('turbo:load', function (event) {
    currentURL = new URL(event.originalEvent.detail.url);
    console.log("Page loaded listening to turbo:load event", currentURL.href);
    console.log(" - Protocol:", currentURL.protocol);
    console.log(" - Username:", currentURL.username);
    console.log(" - Password:", currentURL.password);
    console.log(" - Host:", currentURL.host);
    console.log(" - Hostname:", currentURL.hostname);
    console.log(" - Port:", currentURL.port);
    console.log(" - Pathname:", currentURL.pathname);
    console.log(" - Search:", currentURL.search);
    currentURL.searchParams.forEach((v, k) => {
        console.log(`  - ${k}: ${v}`);
    })
    console.log(" - Hash:", currentURL.hash);

    // Add the customer_logo before the Title
    const customer_logo_path = "<%= asset_path('customer_logo.png') %>";
    $(".navbar-brand").prepend(`<img class="navbar-brand-logo" alt="Customer Logo" src="${customer_logo_path}"/>`);

    // Websocket
    console.log("Websocket")
    const webSocketUrl = "ws://localhost:3000/cable"

    // Creates the new websocket connection
    socket = new WebSocket(webSocketUrl);
        
    // When the connection is 1st created, this code runs subscribing the clien to a specific chatroom stream in the ChatRoomChannel
    socket.onopen = function(event) {
        console.log('WebSocket is connected.');
        
        const msg = {
            command: 'subscribe',
            identifier: JSON.stringify({
                channel: 'activity_log'
            }),
        };
        
        socket.send(JSON.stringify(msg));
    };

    // When the connection is closed, this code is run
    socket.onclose = function(event) {
        console.log('WebSocket is closed.');
    };

    // When a message is received through the websocket, this code is run
    socket.onmessage = function(event) {            
        const response = event.data;
        const msg = JSON.parse(response);
        
        // Ignores pings
        if (msg.type === "ping") {
            return;
        } 
        
        console.log("FROM RAILS: ", msg);
        
        // Renders any newly created messages onto the page
        // if (msg.message) {
        //     renderMessage(msg.message)
        // }
        
    };

    // When an error occurs through the websocket connection, this code is run printing the error message
    socket.onerror = function(error) {
        console.log('WebSocket Error: ', error);
    };
});

const sidepanel = "body > div.container-fluid > div > div.col-sm-3.col-md-2.flex-wrap.p-0"
const mainpanel = "body > div.container-fluid > div > div.col-sm-9.col-sm-offset-3.col-md-10.col-md-offset-2";

// JavaScript functions to open the sidebar
function sideOpen() {
    /* Sidebar takes 25% of the total width
    of main container in open state */
    document.querySelector(
        sidepanel).style.width = "16.66666667%";
    
        document.querySelector(
            mainpanel).style.width = "83.33333333%";
    document.querySelector(
        sidepanel).style.display = "block";
    // document.querySelector(
    //     "openNav").style.display = "none";
}
// JavaScript functions to close the sidebar
function sideClose() {
    // Sidebar takes 0% of the total width
    // of main container in open state
    document.querySelector(
        mainpanel).style.marginLeft = "0%";
    document.querySelector(
        mainpanel).style.width = "100%";
    // Visibility is hidden
    document.querySelector(
        sidepanel).style.display = "none";
    // document.querySelector(
    //     "openNav").style.display = "inline-block";
}
